{
  "_args": [
    [
      {
        "raw": "https://github.com/nchutchind/cordova-plugin-app-launcher",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/nchutchind/cordova-plugin-app-launcher",
        "spec": "git+https://github.com/nchutchind/cordova-plugin-app-launcher.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:nchutchind/cordova-plugin-app-launcher.git",
          "sshUrl": "git+ssh://git@github.com/nchutchind/cordova-plugin-app-launcher.git",
          "httpsUrl": "git+https://github.com/nchutchind/cordova-plugin-app-launcher.git",
          "gitUrl": "git://github.com/nchutchind/cordova-plugin-app-launcher.git",
          "shortcut": "github:nchutchind/cordova-plugin-app-launcher",
          "directUrl": "https://raw.githubusercontent.com/nchutchind/cordova-plugin-app-launcher/master/package.json"
        }
      },
      "/Users/yuriihalavai/projects/prayer/prayer-mobile"
    ]
  ],
  "_from": "git+https://github.com/nchutchind/cordova-plugin-app-launcher.git",
  "_id": "cordova-plugin-app-launcher@0.4.0",
  "_inCache": true,
  "_location": "/cordova-plugin-app-launcher",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/nchutchind/cordova-plugin-app-launcher",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/nchutchind/cordova-plugin-app-launcher",
    "spec": "git+https://github.com/nchutchind/cordova-plugin-app-launcher.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:nchutchind/cordova-plugin-app-launcher.git",
      "sshUrl": "git+ssh://git@github.com/nchutchind/cordova-plugin-app-launcher.git",
      "httpsUrl": "git+https://github.com/nchutchind/cordova-plugin-app-launcher.git",
      "gitUrl": "git://github.com/nchutchind/cordova-plugin-app-launcher.git",
      "shortcut": "github:nchutchind/cordova-plugin-app-launcher",
      "directUrl": "https://raw.githubusercontent.com/nchutchind/cordova-plugin-app-launcher/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/nchutchind/cordova-plugin-app-launcher.git#f3c4509441dc88805aa047bd373970f9a915ed86",
  "_shasum": "2890f9b19d525248bfe4f42011e664b740b54994",
  "_shrinkwrap": null,
  "_spec": "https://github.com/nchutchind/cordova-plugin-app-launcher",
  "_where": "/Users/yuriihalavai/projects/prayer/prayer-mobile",
  "author": {
    "name": "Nicholas Hutchind"
  },
  "bugs": {
    "url": "https://github.com/nchutchind/cordova-plugin-app-launcher/issues"
  },
  "dependencies": {},
  "description": "This plugin allows you to see if other apps are installed and launch them. On Android, you can send extras to the launched Activity and receive result data (if available), as well as retrieve a list of applications that can open a specified uri.",
  "devDependencies": {},
  "gitHead": "f3c4509441dc88805aa047bd373970f9a915ed86",
  "homepage": "https://github.com/nchutchind/cordova-plugin-app-launcher#readme",
  "keywords": [
    "cordova",
    "launcher",
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios"
  ],
  "license": "MIT",
  "name": "cordova-plugin-app-launcher",
  "optionalDependencies": {},
  "readme": "cordova-plugin-app-launcher\n===========================\n\nSimple Cordova plugin to see if other apps are installed and launch them.\n\n## 0. Index\n1. [Description](#1-description)\n2. [Installation](#2-installation)\n3. [Usage](#3-usage)\n4. [Changelog](#4-changelog)\n5. [Credits](#5-credits)\n6. [License](#6-license)\n\n## 1. Description\n\nThis plugin allows you to check if an app is installed that can handle a specific uri and launch an app via uri on iOS and Android. Additionally, you may open an Android app using its package id.\n* (iOS, Android) Check if any apps are installed that can launch via a specified uri.\n* (iOS, Android) Launch an app via a specified uri.\n* (Android) Check if an app is installed via its package id.\n* (Android) Check if an app is installed for an action name.\n* (Android) Launch an app via its package id.\n* (Android) Launch an app for an action name.\n* (Android) Launch an app with extras included.\n* (Android) Return results from a launched app once it is finished.\n\n## 2. Installation\n\n### Automatically (CLI / Plugman)\n\n```\n$ cordova plugin add https://github.com/nchutchind/cordova-plugin-app-launcher.git\n```\nand then (this step will modify your project):\n```\n$ cordova prepare\n```\n\n1\\. Add the following xml to your `config.xml`:\n```xml\n<!-- for iOS -->\n<feature name=\"Launcher\">\n\t<param name=\"ios-package\" value=\"Launcher\" />\n</feature>\n<!-- \nAdditionally, for iOS 9+, you may need to install the cordova-plugin-queries-schemes plugin, which will allow whitelisting of what URLs your app will be allowed to launch. \n\ncordova plugin add cordova-plugin-queries-schemes\n-->\n```\n```xml\n<!-- for Android -->\n<feature name=\"Launcher\">\n\t<param name=\"android-package\" value=\"com.hutchind.cordova.plugins.launcher.Launcher\" />\n</feature>\n```\n\n2\\. Add `www/Launcher.js` to your project and reference it in `index.html`:\n```html\n<script type=\"text/javascript\" src=\"js/Launcher.js\"></script>\n```\n\n3\\. Copy the files in `src/` for iOS and/or Android into your project.\n\niOS: Copy `Launcher.h` and `Launcher.m` to `platforms/ios/<ProjectName>/Plugins`\n\nAndroid: Copy `Launcher.java` to `platforms/android/src/com/hutchind/cordova/plugins` (you will probably need to create this path)\n\n### PhoneGap Build (possibly outdated)\n\nAdd the following xml to your `config.xml` to always use the latest version of this plugin:\n```xml\n<gap:plugin name=\"cordova-plugin-app-launcher\" />\n```\nor to use a specific version:\n```xml\n<gap:plugin name=\"cordova-plugin-app-launcher\" version=\"0.3.1\" />\n```\nFor iOS 9+, the following may need to be added so that the URLs used to launch apps can be whitelisted (in this example, customSchemeName:// and fb:// would have been the URLs registered to the apps we want to be able to launch):\n```xml\n<gap:config-file platform=\"ios\" parent=\"LSApplicationQueriesSchemes\" overwrite=\"true\">\n\t<array>\n\t\t<string>customSchemeName</string>\n\t\t<string>fb</string>\n\t</array>\n</gap:config-file>\n```\n\n## 3. Usage\n```javascript\n\t// Default handlers\n\tvar successCallback = function(data) {\n\t\talert(\"Success!\");\n\t\t// if calling canLaunch() with getAppList:true, data will contain an array named \"appList\" with the package names of applications that can handle the uri specified.\n\t};\n\tvar errorCallback = function(errMsg) {\n\t\talert(\"Error! \" + errMsg);\n\t}\n```\n\nCheck to see if Facebook can be launched via uri (**iOS** and **Android**)\n```javascript\n\twindow.plugins.launcher.canLaunch({uri:'fb://'}, successCallback, errorCallback);\n```\n\nCheck to see if Facebook is installed (**Android**)\n```javascript\n\twindow.plugins.launcher.canLaunch({packageName:'com.facebook.katana'}, successCallback, errorCallback);\n```\n\nLaunch Facebook to the logged in user's profile (**iOS** and **Android**)\n```javascript\n\twindow.plugins.launcher.launch({uri:'fb://profile'}, successCallback, errorCallback);\n```\n\nLaunch Facebook via package id (**Android**)\n```javascript\n\twindow.plugins.launcher.launch({packageName:'com.facebook.katana'}, successCallback, errorCallback);\n```\n\nCheck to see if an app is installed that can play NASA TV (**Android**)\n```javascript\n\twindow.plugins.launcher.canLaunch({\n\t\turi:'http://nasatv-lh.akamaihd.net/i/NASA_101@319270/master.m3u8',\n\t\tdataType:'application/x-mpegURL'\n\t}, successCallback, errorCallback);\n```\n\nGet a list of installed app packages that can play NASA TV (**Android**)\n```javascript\n\twindow.plugins.launcher.canLaunch({\n\t\turi:'http://nasatv-lh.akamaihd.net/i/NASA_101@319270/master.m3u8',\n\t\tdataType:'application/x-mpegURL',\n\t\tgetAppList: true\n\t}, successCallback, errorCallback);\n```\n\nLaunch NASA TV video stream in MxPlayer Free (**Android**)\n```javascript\n\twindow.plugins.launcher.launch({\n\t\tpackageName:'com.mxtech.videoplayer.ad',\n\t\turi:'http://nasatv-lh.akamaihd.net/i/NASA_101@319270/master.m3u8',\n\t\tdataType:'application/x-mpegURL'\n\t}, successCallback, errorCallback);\n```\n\nLaunch MxPlayer Free with Extras for specific videos from the sdcard, specific titles, and starting at 3 seconds in (**Android**)\n```javascript\n\tvar sdcard = \"file:///sdcard/\";\n\tvar file1 = sdcard + \"video1.mp4\", file2 = sdcard + \"video2.mp4\";\n\n\twindow.plugins.launcher.launch({\n\t\tpackageName:'com.mxtech.videoplayer.ad',\n\t\turi:file1,\n\t\tdataType:'video/*'\n\t\textras: [\n\t\t\t{\"name\":\"video_list\", \"value\":[file1,file2], \"dataType\":\"ParcelableArray\", \"paType\":\"Uri\"},\n\t\t\t{\"name\":\"video_list.name\", \"value\":[\"Awesome Video\",\"Sweet Title\"], \"dataType\":\"StringArray\"},\n\t\t\t{\"name\":\"position\", \"value\":3000, \"dataType\":\"int\"}\n\t\t]\n\t}, successCallback, errorCallback);\n```\nLaunch MxPlayer Free with Extras for a specific video with title and return results (**Android**)\n```javascript\n\tvar filename = \"file:///sdcard/video.mp4\";\n\n\twindow.plugins.launcher.launch({\n\t\tpackageName:'com.mxtech.videoplayer.ad',\n\t\turi:filename,\n\t\tdataType:'video/*',\n\t\textras: [\n\t\t\t{\"name\":\"video_list\", \"value\":[filename], \"dataType\":\"ParcelableArray\", \"paType\":\"Uri\"},\n\t\t\t{\"name\":\"video_list.name\", \"value\":[\"Whatever Title You Want\"], \"dataType\":\"StringArray\"},\n\t\t\t{\"name\":\"return_result\", \"value\":true, \"dataType\":\"Boolean\"}\n\t\t],\n\t\tsuccessCallback: function(json) {\n\t\t\tif (json.isActivityDone) {\n\t\t\t\tif (json.extras && json.extras.end_by) {\n\t\t\t\t\tif (json.data) {\n\t\t\t\t\t\talert(\"MxPlayer stopped while on video: \" + json.data);\n\t\t\t\t\t}\n\t\t\t\t\tif (json.extras.end_by == \"user\") {\n\t\t\t\t\t\t// MxPlayer stopped because the User quit\n\t\t\t\t\t\talert(\"User watched \" + json.extras.position + \" of \" + json.extras.duration + \" before quitting.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\talert(\"MxPlayer finished playing video without user quitting.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\talert(\"Playback finished, but we have no results from MxPlayer.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"MxPlayer launched\");\n\t\t\t}\n\t\t},\n\t\terrorCallback: function(err) {\n\t\t\talert(\"There was an error launching MxPlayer.\")\n\t\t}\n\t});\n```\n\nCheck to see if Peek Acuity can be launched via an Action Name (**Android**)\n\n<i>AndroidManifest.xml:</i>\n```xml\n\t<activity\n\t\tandroid:name=\"org.peekvision.lite.android.visualacuity.VisualAcuityActivity\">\n\t\t<intent-filter>\n\t\t\t<action android:name=\"org.peekvision.intent.action.TEST_ACUITY\"/>\n\t\t\t<category android:name=\"android.intent.category.DEFAULT\"/>\n\t\t</intent-filter>\n\t</activity>\n```\n\n<i>Typescript:</i>\n```typescript\n\tlet actionName = 'org.peekvision.intent.action.TEST_ACUITY';\n\n\twindow[\"plugins\"].launcher.canLaunch({actionName: actionName},\n\t\tdata => console.log(\"Peek Acuity can be launched\"),\n\t\terrMsg => console.log(\"Peek Acuity not installed! \" + errMsg)\n\t);\n```\n\nLaunch Peek Acuity via an Action Name with Extras and return results (**Android**)\n```typescript\n\tlet actionName = 'org.peekvision.intent.action.TEST_ACUITY';\n\n\tlet extras = [\n\t  {\"name\":\"progressionLogMarArray\", \"value\":[1.0,0.8,0.6,0.3,0.1],\"dataType\":\"DoubleArray\"},\n\t  {\"name\":\"instructions\",\t\"value\":\"none\",\t\t\"dataType\":\"String\"},\n\t  {\"name\":\"eye\",\t\t\"value\":\"left\",\t\t\"dataType\":\"String\"},\n\t  {\"name\":\"beyondOpto\",\t\t\"value\":true,\t\t\"dataType\":\"Boolean\"},\n\t  {\"name\":\"testDistance\",\t\"value\":\"4m\",\t\t\"dataType\":\"String\"},\n\t  {\"name\":\"displayResult\",\t\"value\":false,\t\t\"dataType\":\"Boolean\"},\n\t  {\"name\":\"return_result\",\t\"value\":true,\t\t\"dataType\":\"Boolean\"}\n\t];\n\n\twindow[\"plugins\"].launcher.launch({actionName: actionName, extras: extras},\n\t\tjson => {\n\t\t\tif (json.isActivityDone) {\n\t\t\t\tif (json.data) {\n\t\t\t\t\tconsole.log(\"data=\" + json.data);\n\t\t\t\t}\n\t\t\t\tif (json.extras) {\n\t\t\t\t\tif (json.extras.logMar) {\n\t\t\t\t\t\tconsole.log(\"logMar=\" + json.extras.logMar);\n\t\t\t\t\t}\n\t\t\t\t\tif (json.extras.averageLux) {\n\t\t\t\t\t\tconsole.log(\"averageLux=\" + json.extras.averageLux);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Peek Acuity done but no results\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Peek Acuity launched\");\n\t\t\t}\n\t\t},\n\t\terrMsg => console.log(\"Peek Acuity error launching: \" + errMsg)\n\t );\n```\n\n# Extras Data Types\n\nMost datatypes that can be put into an Android Bundle are able to be passed in. You must provide the datatype to convert to.\nOnly Uri Parcelables are supported currently.\n```javascript\n\textras: [\n\t\t{\"name\":\"myByte\", \"value\":1, \"dataType\":\"Byte\"},\n\t\t{\"name\":\"myByteArray\", \"value\":[1,0,2,3], \"dataType\":\"ByteArray\"},\n\t\t{\"name\":\"myShort\", \"value\":5, \"dataType\":\"Short\"},\n\t\t{\"name\":\"myShortArray\", \"value\":[1,2,3,4], \"dataType\":\"ShortArray\"},\n\t\t{\"name\":\"myInt\", \"value\":2000, \"dataType\":\"Int\"},\n\t\t{\"name\":\"myIntArray\", \"value\":[12,34,56], \"dataType\":\"IntArray\"},\n\t\t{\"name\":\"myIntArrayList\", \"value\":[123,456,789], \"dataType\":\"IntArrayList\"},\n\t\t{\"name\":\"myLong\", \"value\":123456789101112, \"dataType\":\"Long\"},\n\t\t{\"name\":\"myLongArray\", \"value\":[123456789101112,121110987654321], \"dataType\":\"LongArray\"},\n\t\t{\"name\":\"myFloat\", \"value\":12.34, \"dataType\":\"Float\"},\n\t\t{\"name\":\"myFloatArray\", \"value\":[12.34,56.78], \"dataType\":\"FloatArray\"},\n\t\t{\"name\":\"myDouble\", \"value\":12.3456789, \"dataType\":\"Double\"},\n\t\t{\"name\":\"myDoubleArray\", \"value\":[12.3456789, 98.7654321], \"dataType\":\"DoubleArray\"},\n\t\t{\"name\":\"myBoolean\", \"value\":false, \"dataType\":\"Boolean\"},\n\t\t{\"name\":\"myBooleanArray\", \"value\":[true,false,true], \"dataType\":\"BooleanArray\"},\n\t\t{\"name\":\"myString\", \"value\":\"this is a test\", \"dataType\":\"String\"},\n\t\t{\"name\":\"myStringArray\", \"value\":[\"this\",\"is\", \"a\", \"test\"], \"dataType\":\"StringArray\"},\n\t\t{\"name\":\"myStringArrayList\", \"value\":[\"this\",\"is\",\"a\",\"test\"], \"dataType\":\"StringArrayList\"},\n\t\t{\"name\":\"myChar\", \"value\":\"T\", \"dataType\":\"Char\"},\n\t\t{\"name\":\"myCharArray\", \"value\":\"this is a test\", \"dataType\":\"CharArray\"},\n\t\t{\"name\":\"myCharSequence\", \"value\":\"this is a test\", \"dataType\":\"CharSequence\"},\n\t\t{\"name\":\"myCharSequenceArray\", \"value\":[\"this\",\"is a\", \"test\"], \"dataType\":\"CharSequenceArray\"},\n\t\t{\"name\":\"myCharSequenceArrayList\", \"value\":[\"this\",\"is a\", \"test\"], \"dataType\":\"CharSequenceArrayList\"},\n\t\t{\"name\":\"myParcelable\", \"value\":\"http://foo\", \"dataType\":\"Parcelable\", \"paType\":\"Uri\"},\n\t\t{\"name\":\"myParcelableArray\", \"value\":[\"http://foo\",\"http://bar\"], \"dataType\":\"ParcelableArray\", \"paType\":\"Uri\"},\n\t\t{\"name\":\"myParcelableArrayList\", \"value\":[\"http://foo\",\"http://bar\"], \"dataType\":\"ParcelableArrayList\", \"paType\":\"Uri\"},\n\t\t{\"name\":\"mySparseParcelableArray\", \"value\":{\"10\":\"http://foo\", \"-25\":\"http://bar\"}, \"dataType\":\"SparseParcelableArray\", \"paType\":\"Uri\"},\n\t]\n```\n\n#### Launcher.canLaunch Success Callback\nNo data is passed.\n\n#### Launcher.canLaunch Error Callback\nPasses a string containing an error message.\n\n#### Launcher.launch Success Callback Data\nPasses a JSON object with varying parts.\n\nActivity launched\n```javascript\n\t{\n\t\tisLaunched: true\n\t}\n```\n\nActivity finished\n```javascript\n\t{\n\t\tisActivityDone: true\n\t}\n```\n\nActivity launched and data returned\n```javascript\n\t{\n\t\tisActivityDone: true,\n\t\tdata: <Uri returned from Activity, if any>,\n\t\textras <JSON object containing data returned from Activity, if any>\n\t}\n```\n\n#### Launcher.launch Error Callback Data\nPasses an error message as a string.\n\n## 4. Changelog\n0.4.0: Android: Added ability to launch with intent. Thanks to [@mmey3k] for the code.\n\n0.2.0: Android: Added ability to launch activity with extras and receive data back from launched app when it is finished.\n\n0.1.2: Added ability to check if any apps are installed that can handle a certain datatype on Android.\n\n0.1.1: Added ability to launch a package with a data uri and datatype on Android.\n\n0.1.0: initial version supporting Android and iOS\n\n## 5. Credits\nSpecial thanks to [@michael1t](https://github.com/michael1t) for sponsoring the development of the Extras portion of this plugin.\n\n## 6. License\n\n[The MIT License (MIT)](http://www.opensource.org/licenses/mit-license.html)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nchutchind/cordova-plugin-app-launcher.git"
  },
  "version": "0.4.0"
}
